import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# ==========================
# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
# ==========================
sales_teams = [
    "ReVeRs", "–®–∏–∫–∞—Ä–Ω—ã–π –≥–∏–±–∫–∏–π –≥–ª–∞–¥–∏–æ–ª—É—Å", 
]

process_teams = [
    "i–ú–æ–ª–æ–¥—Ü–∞", "–ù–µ–π—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ", 
]

# ==========================
# –°–æ—Å—Ç–æ—è–Ω–∏—è
# ==========================
class EvalForm(StatesGroup):
    category = State()
    team_name = State()
    is_own_team = State()
    is_new_info = State()
    info_quality = State()
    comment = State()
    finish = State()

# ==========================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
# ==========================
category_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ—Ü–µ—Å—Å—ã")
yes_no_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")
info_quality_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
send_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
restart_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ü–µ–Ω–∫–µ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã")

# ==========================
# –•–µ–Ω–¥–ª–µ—Ä—ã
# ==========================
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await EvalForm.category.set()
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã:", reply_markup=category_kb)

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.message_handler(state=EvalForm.category)
async def choose_category(message: types.Message, state: FSMContext):
    if message.text not in ["–ü—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ—Ü–µ—Å—Å—ã"]:
        return
    await state.update_data(category=message.text)

    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    teams = sales_teams if message.text == "–ü—Ä–æ–¥–∞–∂–∏" else process_teams
    for team in teams:
        kb.add(team)

    await EvalForm.team_name.set()
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb)

# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(state=EvalForm.team_name)
async def get_team(message: types.Message, state: FSMContext):
    await state.update_data(team_name=message.text)
    await EvalForm.is_own_team.set()
    await message.answer("–ö–∞–ø–∏—Ç–∞–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ?", reply_markup=yes_no_kb)

# –°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ—Ç
@dp.message_handler(state=EvalForm.is_own_team)
async def own_team(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        return
    await state.update_data(is_own_team=message.text)
    await EvalForm.is_new_info.set()
    await message.answer("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=yes_no_kb)

# –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@dp.message_handler(state=EvalForm.is_new_info)
async def new_info(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        return
    await state.update_data(is_new_info=message.text)

    if message.text == "–ù–µ—Ç":
        await EvalForm.comment.set()
        await message.answer("–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é).")
    else:
        await EvalForm.info_quality.set()
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                             reply_markup=info_quality_kb)

# –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å
@dp.message_handler(state=EvalForm.info_quality)
async def info_quality(message: types.Message, state: FSMContext):
    if message.text not in ["–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"]:
        return
    await state.update_data(info_quality=message.text)
    await EvalForm.comment.set()
    await message.answer("–î–æ–±–∞–≤—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–ø–æ –∂–µ–ª–∞–Ω–∏—é).")

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@dp.message_handler(state=EvalForm.comment)
async def comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await EvalForm.finish.set()
    await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
@dp.message_handler(lambda msg: msg.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", state=EvalForm.finish)
async def send_to_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    report = (
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {data.get('team_name')}\n"
        f"–û —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ: {data.get('is_own_team')}\n"
        f"–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data.get('is_new_info')}\n"
        f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {data.get('info_quality')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}"
    )
    await bot.send_message(ADMIN_ID, report)
    await message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=restart_kb)
    await state.finish()

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
@dp.message_handler(lambda msg: msg.text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ü–µ–Ω–∫–µ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã")
async def restart(message: types.Message):
    await EvalForm.category.set()
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥—ã:", reply_markup=category_kb)

# ==========================
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

