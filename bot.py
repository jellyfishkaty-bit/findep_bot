class EvalForm(StatesGroup):
    category = State()
    team_name = State()
    is_own_team = State()
    is_new_info = State()
    info_quality = State()
    comment = State()

# –°–ø–∏—Å–∫–∏ –∫–æ–º–∞–Ω–¥
sales_teams = [
    "–ö—Ä–∞–±—Å—Ç–µ—Ä—ã", "–ö—Ä–∏–ø—Ç–æ–Ω", "–£–ª—ë—Ç–Ω—ã–π —Å—á–µ—Ç", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ú–∞–≥–Ω–∞—Ç—ã", "Wealth & Health",
    "VIP —Å–ø–µ—Ü–Ω–∞–∑", "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–æ—Ä", "–°—Ç–∏—Ä–∞—è –≥—Ä–∞–Ω–∏—Ü—ã", "–§–∞–∫—Ç–æ—Ä —Ä–æ—Å—Ç–∞", "–ó–∞–π, –≤—ã–¥–∞–≤–∞–π!",
    "BestSalers", "–ò–ü–û–¢–ï–ß–ù–´–ô –®–ê–ù–¢–ê–†–ê–ú", "–æ–æ–æ–æ '–ö–∞–∫–∏–µ –õ—é–¥–∏!'", "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ",
    "–ö–æ—Å–º–æ –ü—Ä–æ–¥–∞–∫—à–Ω", "–í—Å—ë –ó–ê–©–ò–¢–ê–Ω–æ!", "–ú–∏–ª–ª–∏–∞—Ä–¥—ã. –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü", "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ë–∏–∑–î–µ–≤",
    "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", '"–ë–ï–ó –ü–û–¢–ï–†–¨"'
]

process_teams = [
    "–ú–∏–ª—ã–π, –ö–û–î –¥–æ–≤–∏–Ω—á–µ–Ω", "R.A.I. center", "–í–µ–ª–∏–∫–∏–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä", "–ë–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–µ Pro –°–ö–£–î—ã",
    "–°–∫—Ä–∞—Ç", "–†–∞–∫–µ—Ç–∞", "Data Stars", "–ö—É–±–∏–∫ –†—É–±–ò–ò–∫–∞", "–≠–≤–æ–ª—é—Ü–∏—è", "–ù–∞ —Å–≤—è–∑–ò–ò",
    "–ö–æ–º–∞–Ω–¥–∞ –≠. –ù–∞–±–∏—É–ª–ª–∏–Ω–æ–π", "THE FILTER", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç", "–ó–Ω–∞—Ö–∞—Ä—å KIDS",
    "–°–æ–≤–∫–æ–º–ü–∞—Å—Å–∏–≤–∏—Ç–∏", "–ù–µ–π—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ + –¢—É—Å–∞ –±–µ–∑ –î–∂–∏–≥–∞–Ω–∞", "–ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –ì–∞–ª–∏–Ω–∞", "–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç—ã",
    "i–ú–æ–ª–æ–¥—Ü–∞!", "#–õ—é–¥–∏–í–∞–∂–Ω–µ–µ"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
category_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ—Ü–µ—Å—Å—ã")
yes_no_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")
info_quality_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
send_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
restart_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ü–µ–Ω–∫–µ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã")

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await EvalForm.category.set()
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)

# –ö–∞—Ç–µ–≥–æ—Ä–∏—è
@dp.message_handler(state=EvalForm.category)
async def choose_category(message: types.Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–¥–∞–∂–∏":
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for team in sales_teams:
            kb.add(team)
        await EvalForm.team_name.set()
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü—Ä–æ–¥–∞–∂–∏:", reply_markup=kb)
    elif message.text == "–ü—Ä–æ—Ü–µ—Å—Å—ã":
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        for team in process_teams:
            kb.add(team)
        await EvalForm.team_name.set()
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü—Ä–æ—Ü–µ—Å—Å—ã:", reply_markup=kb)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞.")

# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(state=EvalForm.team_name)
async def get_team_name(message: types.Message, state: FSMContext):
    await state.update_data(team_name=message.text)
    await EvalForm.is_own_team.set()
    await message.answer("–ö–∞–ø–∏—Ç–∞–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ?", reply_markup=yes_no_kb)

# –°–≤–æ—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ—Ç
@dp.message_handler(state=EvalForm.is_own_team)
async def own_team(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        return
    await state.update_data(is_own_team=message.text)
    await EvalForm.is_new_info.set()
    await message.answer("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=yes_no_kb)

# –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@dp.message_handler(state=EvalForm.is_new_info)
async def new_info(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        return
    await state.update_data(is_new_info=message.text)
    await EvalForm.info_quality.set()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                         reply_markup=info_quality_kb)

# –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å
@dp.message_handler(state=EvalForm.info_quality)
async def info_quality(message: types.Message, state: FSMContext):
    if message.text not in ["–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"]:
        return
    await state.update_data(info_quality=message.text)
    await EvalForm.comment.set()
    await message.answer("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–æ–∂–Ω–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ):", reply_markup=types.ReplyKeyboardRemove())

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@dp.message_handler(state=EvalForm.comment)
async def add_comment(message: types.Message, state: FSMContext):
    await state.update_data(comment=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)
    await state.set_state("finish")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
@dp.message_handler(lambda msg: msg.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", state="finish")
async def send_to_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    report = (
        f"–ö–æ–º–∞–Ω–¥–∞: {data.get('team_name')}\n"
        f"–û —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ: {data.get('is_own_team')}\n"
        f"–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data.get('is_new_info')}\n"
        f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {data.get('info_quality')}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment')}"
    )
    await bot.send_message(ADMIN_ID, report)
    await message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=restart_kb)
    await state.finish()

# –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
@dp.message_handler(lambda msg: msg.text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ü–µ–Ω–∫–µ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã")
async def restart(message: types.Message):
    await EvalForm.category.set()
    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
