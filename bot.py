import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# --- ENV ---
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ë–æ—Ç ---
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class EvalForm(StatesGroup):
    category = State()
    team_name = State()
    is_own_team = State()
    is_new_info = State()
    info_quality = State()
    method_validity = State()
    assumptions_quality = State()
    result_reliability = State()
    result_type = State()
    project_effect = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
category_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ—Ü–µ—Å—Å—ã")

sales_teams = [
    "–ö—Ä–∞–±—Å—Ç–µ—Ä—ã", "–ö—Ä–∏–ø—Ç–æ–Ω", "–£–ª—ë—Ç–Ω—ã–π —Å—á–µ—Ç", "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –ú–∞–≥–Ω–∞—Ç—ã", "Wealth & Health",
    "VIP —Å–ø–µ—Ü–Ω–∞–∑", "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–æ—Ä", "–°—Ç–∏—Ä–∞—è –≥—Ä–∞–Ω–∏—Ü—ã", "–§–∞–∫—Ç–æ—Ä —Ä–æ—Å—Ç–∞", "–ó–∞–π, –≤—ã–¥–∞–≤–∞–π!",
    "BestSalers", "–ò–ü–û–¢–ï–ß–ù–´–ô –®–ê–ù–¢–ê–†–ê–ú", "–æ–æ–æ–æ \"–ö–∞–∫–∏–µ –õ—é–¥–∏!\"", "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ",
    "–ö–æ—Å–º–æ –ü—Ä–æ–¥–∞–∫—à–Ω", "–í—Å—ë –ó–ê–©–ò–¢–ê–Ω–æ!", "–ú–∏–ª–ª–∏–∞—Ä–¥—ã. –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü", "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ë–∏–∑–î–µ–≤",
    "–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å", "\"–ë–ï–ó –ü–û–¢–ï–†–¨\""
]

process_teams = [
    "–ú–∏–ª—ã–π, –ö–û–î –¥–æ–≤–∏–Ω—á–µ–Ω", "R.A.I. center", "–í–µ–ª–∏–∫–∏–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä", "–ë–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–µ Pro –°–ö–£–î—ã",
    "–°–∫—Ä–∞—Ç", "–†–∞–∫–µ—Ç–∞", "Data Stars", "–ö—É–±–∏–∫ –†—É–±–ò–ò–∫–∞", "–≠–≤–æ–ª—é—Ü–∏—è", "–ù–∞ —Å–≤—è–∑–ò–ò",
    "–ö–æ–º–∞–Ω–¥–∞ –≠. –ù–∞–±–∏—É–ª–ª–∏–Ω–æ–π", "THE FILTER", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç", "–ó–Ω–∞—Ö–∞—Ä—å KIDS",
    "–°–æ–≤–∫–æ–º–ü–∞—Å—Å–∏–≤–∏—Ç–∏", "–ù–µ–π—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ + –¢—É—Å–∞ –±–µ–∑ –î–∂–∏–≥–∞–Ω–∞", "–ö—Ä–µ–º–Ω–∏–µ–≤–∞—è –ì–∞–ª–∏–Ω–∞",
    "–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç—ã", "i–ú–æ–ª–æ–¥—Ü–∞!", "#–õ—é–¥–∏–í–∞–∂–Ω–µ–µ"
]

def build_keyboard(options):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for item in options:
        kb.add(item)
    return kb

yes_no_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")
info_quality_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
method_validity_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–ï—Å—Ç—å –æ—à–∏–±–∫–∏", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"
)
assumptions_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"
)
result_reliability_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–í–µ—Ä–∏–º", "–ù–µ –≤–µ—Ä–∏–º", "–°–æ–º–Ω–µ–≤–∞–µ–º—Å—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
result_type_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω"
)
project_effect_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–†–∞–∑–æ–≤—ã–π", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"
)
send_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")


# --- –°—Ç–∞—Ä—Ç ---
@dp.message_handler(commands=["start"])
async def start(message: types.Message, state: FSMContext):
    await EvalForm.category.set()
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)


# --- –ö–∞—Ç–µ–≥–æ—Ä–∏—è ---
@dp.message_handler(state=EvalForm.category)
async def choose_category(message: types.Message, state: FSMContext):
    if message.text not in ["–ü—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ—Ü–µ—Å—Å—ã"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –∫–Ω–æ–ø–∫–∏ üëá", reply_markup=category_kb)
        return
    await state.update_data(category=message.text)
    if message.text == "–ü—Ä–æ–¥–∞–∂–∏":
        await EvalForm.team_name.set()
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü—Ä–æ–¥–∞–∂–∏:", reply_markup=build_keyboard(sales_teams))
    else:
        await EvalForm.team_name.set()
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ü—Ä–æ—Ü–µ—Å—Å—ã:", reply_markup=build_keyboard(process_teams))


# --- –ö–æ–º–∞–Ω–¥–∞ ---
@dp.message_handler(state=EvalForm.team_name)
async def get_team(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if data["category"] == "–ü—Ä–æ–¥–∞–∂–∏" and message.text not in sales_teams:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ üëá", reply_markup=build_keyboard(sales_teams))
        return
    if data["category"] == "–ü—Ä–æ—Ü–µ—Å—Å—ã" and message.text not in process_teams:
        await message.answer("–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –∏–∑ —Å–ø–∏—Å–∫–∞ üëá", reply_markup=build_keyboard(process_teams))
        return

    await state.update_data(team_name=message.text)
    await EvalForm.is_own_team.set()
    await message.answer("–ö–∞–ø–∏—Ç–∞–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ?", reply_markup=yes_no_kb)


# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã ---
@dp.message_handler(state=EvalForm.is_own_team)
async def own_team(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        return
    await state.update_data(is_own_team=message.text)
    await EvalForm.is_new_info.set()
    await message.answer("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=yes_no_kb)


@dp.message_handler(state=EvalForm.is_new_info)
async def new_info(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        return
    await state.update_data(is_new_info=message.text)
    if message.text == "–ù–µ—Ç":
        await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)
    else:
        await EvalForm.info_quality.set()
        await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
                             reply_markup=info_quality_kb)


@dp.message_handler(state=EvalForm.info_quality)
async def info_quality(message: types.Message, state: FSMContext):
    if message.text not in ["–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"]:
        return
    await state.update_data(info_quality=message.text)
    await EvalForm.method_validity.set()
    await message.answer("–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π?",
                         reply_markup=method_validity_kb)


@dp.message_handler(state=EvalForm.method_validity)
async def method_validity(message: types.Message, state: FSMContext):
    if message.text not in ["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–ï—Å—Ç—å –æ—à–∏–±–∫–∏", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"]:
        return
    await state.update_data(method_validity=message.text)
    await EvalForm.assumptions_quality.set()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞",
                         reply_markup=assumptions_kb)


@dp.message_handler(state=EvalForm.assumptions_quality)
async def assumptions_quality(message: types.Message, state: FSMContext):
    if message.text not in ["–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"]:
        return
    await state.update_data(assumptions_quality=message.text)
    await EvalForm.result_reliability.set()
    await message.answer("–í–µ—Ä–∏—Ç–µ –ª–∏ –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?",
                         reply_markup=result_reliability_kb)


@dp.message_handler(state=EvalForm.result_reliability)
async def result_reliability(message: types.Message, state: FSMContext):
    if message.text not in ["–í–µ—Ä–∏–º", "–ù–µ –≤–µ—Ä–∏–º", "–°–æ–º–Ω–µ–≤–∞–µ–º—Å—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"]:
        return
    await state.update_data(result_reliability=message.text)
    await EvalForm.result_type.set()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                         reply_markup=result_type_kb)


@dp.message_handler(state=EvalForm.result_type)
async def result_type(message: types.Message, state: FSMContext):
    if message.text not in ["–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω"]:
        return
    await state.update_data(result_type=message.text)
    await EvalForm.project_effect.set()
    await message.answer("–ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞?", reply_markup=project_effect_kb)


@dp.message_handler(state=EvalForm.project_effect)
async def project_effect(message: types.Message, state: FSMContext):
    if message.text not in ["–†–∞–∑–æ–≤—ã–π", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"]:
        return
    await state.update_data(project_effect=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@dp.message_handler(lambda msg: msg.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", state="*")
async def send_to_admin(message: types.Message, state: FSMContext):
    data = await state.get_data()
    report = (
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category')}\n"
        f"–ö–æ–º–∞–Ω–¥–∞: {data.get('team_name')}\n"
        f"–û —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ: {data.get('is_own_team')}\n"
        f"–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data.get('is_new_info')}\n"
        f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {data.get('info_quality')}\n"
        f"–ú–µ—Ç–æ–¥–∏–∫–∞: {data.get('method_validity')}\n"
        f"–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏: {data.get('assumptions_quality')}\n"
        f"–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {data.get('result_reliability')}\n"
        f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {data.get('result_type')}\n"
        f"–≠—Ñ—Ñ–µ–∫—Ç: {data.get('project_effect')}"
    )
    await bot.send_message(ADMIN_ID, report)

    # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.finish()

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É
    restart_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É")
    await message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=restart_kb)


# --- –†–µ—Å—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ ---
@dp.message_handler(lambda msg: msg.text == "–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É")
async def restart(message: types.Message):
    await EvalForm.category.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_kb)


# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
