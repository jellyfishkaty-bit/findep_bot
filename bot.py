import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —Ç–æ–∫–µ–Ω –∏ ID –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–°—Ç–∞—Ä—Ç")
yes_no_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")
info_quality_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
method_validity_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–ï—Å—Ç—å –æ—à–∏–±–∫–∏", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"
)
assumptions_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"
)
result_reliability_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–í–µ—Ä–∏–º", "–ù–µ –≤–µ—Ä–∏–º", "–°–æ–º–Ω–µ–≤–∞–µ–º—Å—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
result_type_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω"
)
project_effect_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–†–∞–∑–æ–≤—ã–π", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"
)
send_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")


# –ü–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É.", reply_markup=start_kb)


# –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –°—Ç–∞—Ä—Ç
@dp.message_handler(lambda msg: msg.text == "–°—Ç–∞—Ä—Ç")
async def pressed_start(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å.", reply_markup=types.ReplyKeyboardRemove())


# –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(lambda msg: "team_name" not in user_data.get(msg.from_user.id, {}))
async def get_team_name(message: types.Message):
    user_data[message.from_user.id]["team_name"] = message.text
    await message.answer("–ö–∞–ø–∏—Ç–∞–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ?", reply_markup=yes_no_kb)


# –°–≤–æ—è/—á—É–∂–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(lambda msg: "is_own_team" not in user_data.get(msg.from_user.id, {}))
async def own_team(message: types.Message):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        return
    user_data[message.from_user.id]["is_own_team"] = message.text
    await message.answer("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=yes_no_kb)


# –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
@dp.message_handler(lambda msg: "is_new_info" not in user_data.get(msg.from_user.id, {}))
async def new_info(message: types.Message):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        return
    user_data[message.from_user.id]["is_new_info"] = message.text
    if message.text == "–ù–µ—Ç":
        await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)
    else:
        await message.answer(
            "–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            reply_markup=info_quality_kb,
        )


# –ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
@dp.message_handler(lambda msg: "info_quality" not in user_data.get(msg.from_user.id, {}))
async def info_quality(message: types.Message):
    if message.text not in ["–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"]:
        return
    user_data[message.from_user.id]["info_quality"] = message.text
    await message.answer("–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π?",
                         reply_markup=method_validity_kb)


# –ú–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞
@dp.message_handler(lambda msg: "method_validity" not in user_data.get(msg.from_user.id, {}))
async def method_validity(message: types.Message):
    if message.text not in ["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–ï—Å—Ç—å –æ—à–∏–±–∫–∏", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"]:
        return
    user_data[message.from_user.id]["method_validity"] = message.text
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞",
                         reply_markup=assumptions_kb)


# –ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏
@dp.message_handler(lambda msg: "assumptions_quality" not in user_data.get(msg.from_user.id, {}))
async def assumptions_quality(message: types.Message):
    if message.text not in ["–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"]:
        return
    user_data[message.from_user.id]["assumptions_quality"] = message.text
    await message.answer("–í–µ—Ä–∏—Ç–µ –ª–∏ –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?",
                         reply_markup=result_reliability_kb)


# –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å
@dp.message_handler(lambda msg: "result_reliability" not in user_data.get(msg.from_user.id, {}))
async def result_reliability(message: types.Message):
    if message.text not in ["–í–µ—Ä–∏–º", "–ù–µ –≤–µ—Ä–∏–º", "–°–æ–º–Ω–µ–≤–∞–µ–º—Å—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"]:
        return
    user_data[message.from_user.id]["result_reliability"] = message.text
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                         reply_markup=result_type_kb)


# –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
@dp.message_handler(lambda msg: "result_type" not in user_data.get(msg.from_user.id, {}))
async def result_type(message: types.Message):
    if message.text not in ["–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω"]:
        return
    user_data[message.from_user.id]["result_type"] = message.text
    await message.answer("–ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞?", reply_markup=project_effect_kb)


# –≠—Ñ—Ñ–µ–∫—Ç
@dp.message_handler(lambda msg: "project_effect" not in user_data.get(msg.from_user.id, {}))
async def project_effect(message: types.Message):
    if message.text not in ["–†–∞–∑–æ–≤—ã–π", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"]:
        return
    user_data[message.from_user.id]["project_effect"] = message.text
    await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É
@dp.message_handler(lambda msg: msg.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
async def send_to_admin(message: types.Message):
    data = user_data.get(message.from_user.id, {})
    report = (
        f"–ö–æ–º–∞–Ω–¥–∞: {data.get('team_name')}\n"
        f"–û —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ: {data.get('is_own_team')}\n"
        f"–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {data.get('is_new_info')}\n"
        f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {data.get('info_quality')}\n"
        f"–ú–µ—Ç–æ–¥–∏–∫–∞: {data.get('method_validity')}\n"
        f"–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏: {data.get('assumptions_quality')}\n"
        f"–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {data.get('result_reliability')}\n"
        f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {data.get('result_type')}\n"
        f"–≠—Ñ—Ñ–µ–∫—Ç: {data.get('project_effect')}"
    )
    try:
        await bot.send_message(ADMIN_ID, report)
        await message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")


# –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message_handler(commands=["ping"])
async def ping(message: types.Message):
    try:
        await bot.send_message(ADMIN_ID, "–¢–µ—Å—Ç: –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É ‚úÖ")
        await message.answer("–ü—Ä–æ–±–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É ‚úÖ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
