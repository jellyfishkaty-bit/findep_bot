import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State

# ====== ENV ======
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# ====== LOGGING ======
logging.basicConfig(level=logging.INFO)

# ====== BOT ======
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())


# ====== KEYBOARDS ======
start_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–°—Ç–∞—Ä—Ç")
yes_no_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")
info_quality_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
method_validity_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–ï—Å—Ç—å –æ—à–∏–±–∫–∏", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"
)
assumptions_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"
)
result_reliability_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–í–µ—Ä–∏–º", "–ù–µ –≤–µ—Ä–∏–º", "–°–æ–º–Ω–µ–≤–∞–µ–º—Å—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
result_type_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω"
)
project_effect_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–†–∞–∑–æ–≤—ã–π", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"
)
send_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
after_send_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ü–µ–Ω–∫–µ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã", "–ó–∞–∫–æ–Ω—á–∏—Ç—å"
)


# ====== STATES ======
class EvalFlow(StatesGroup):
    TeamName = State()
    IsOwnTeam = State()
    IsNewInfo = State()
    InfoQuality = State()
    MethodValidity = State()
    Assumptions = State()
    ResultReliability = State()
    ResultType = State()
    ProjectEffect = State()
    ReadyToSend = State()


# ====== HELPERS ======
async def show_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –ù–∞–∂–º–∏ ¬´–°—Ç–∞—Ä—Ç¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É.", reply_markup=start_kb)


def safe(v):
    return v if v else "‚Äî"


async def send_report_to_admin(data: dict):
    report = (
        f"–ö–æ–º–∞–Ω–¥–∞: {safe(data.get('team_name'))}\n"
        f"–û —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ: {safe(data.get('is_own_team'))}\n"
        f"–ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {safe(data.get('is_new_info'))}\n"
        f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {safe(data.get('info_quality'))}\n"
        f"–ú–µ—Ç–æ–¥–∏–∫–∞: {safe(data.get('method_validity'))}\n"
        f"–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏: {safe(data.get('assumptions_quality'))}\n"
        f"–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {safe(data.get('result_reliability'))}\n"
        f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {safe(data.get('result_type'))}\n"
        f"–≠—Ñ—Ñ–µ–∫—Ç: {safe(data.get('project_effect'))}"
    )
    await bot.send_message(ADMIN_ID, report)


# ====== UNIVERSAL ENTRY ======
@dp.message_handler(commands=["start", "cancel"])
async def start_cmd(message: types.Message, state: FSMContext):
    await state.finish()
    await show_start(message)


@dp.message_handler(lambda m: m.text == "–°—Ç–∞—Ä—Ç", state="*")
async def start_flow(message: types.Message, state: FSMContext):
    await state.finish()
    await EvalFlow.TeamName.set()
    await message.answer(
        "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å.",
        reply_markup=ReplyKeyboardRemove(),
    )


# –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É ¬´–°—Ç–∞—Ä—Ç¬ª
@dp.message_handler(state="*")
async def fallback_when_idle(message: types.Message, state: FSMContext):
    current = await state.get_state()
    if current is None and message.text != "–°—Ç–∞—Ä—Ç":
        await show_start(message)


# ====== FLOW ======
@dp.message_handler(state=EvalFlow.TeamName)
async def s_team(message: types.Message, state: FSMContext):
    await state.update_data(team_name=message.text.strip())
    await EvalFlow.IsOwnTeam.set()
    await message.answer("–ö–∞–ø–∏—Ç–∞–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ?", reply_markup=yes_no_kb)


@dp.message_handler(lambda m: m.text in ["–î–∞", "–ù–µ—Ç"], state=EvalFlow.IsOwnTeam)
async def s_is_own(message: types.Message, state: FSMContext):
    await state.update_data(is_own_team=message.text)
    await EvalFlow.IsNewInfo.set()
    await message.answer("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=yes_no_kb)


@dp.message_handler(lambda m: m.text in ["–î–∞", "–ù–µ—Ç"], state=EvalFlow.IsNewInfo)
async def s_new_info(message: types.Message, state: FSMContext):
    await state.update_data(is_new_info=message.text)
    if message.text == "–ù–µ—Ç":
        # —Å—Ä–∞–∑—É –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ
        await EvalFlow.ReadyToSend.set()
        await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)
    else:
        await EvalFlow.InfoQuality.set()
        await message.answer(
            "–û—Ü–µ–Ω–∏—Ç–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            reply_markup=info_quality_kb,
        )


@dp.message_handler(lambda m: m.text in ["–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"], state=EvalFlow.InfoQuality)
async def s_info_quality(message: types.Message, state: FSMContext):
    await state.update_data(info_quality=message.text)
    await EvalFlow.MethodValidity.set()
    await message.answer("–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π?",
                         reply_markup=method_validity_kb)


@dp.message_handler(lambda m: m.text in ["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–ï—Å—Ç—å –æ—à–∏–±–∫–∏", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"], state=EvalFlow.MethodValidity)
async def s_method(message: types.Message, state: FSMContext):
    await state.update_data(method_validity=message.text)
    await EvalFlow.Assumptions.set()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞",
                         reply_markup=assumptions_kb)


@dp.message_handler(lambda m: m.text in ["–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"], state=EvalFlow.Assumptions)
async def s_assumptions(message: types.Message, state: FSMContext):
    await state.update_data(assumptions_quality=message.text)
    await EvalFlow.ResultReliability.set()
    await message.answer("–í–µ—Ä–∏—Ç–µ –ª–∏ –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?",
                         reply_markup=result_reliability_kb)


@dp.message_handler(lambda m: m.text in ["–í–µ—Ä–∏–º", "–ù–µ –≤–µ—Ä–∏–º", "–°–æ–º–Ω–µ–≤–∞–µ–º—Å—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"], state=EvalFlow.ResultReliability)
async def s_reliability(message: types.Message, state: FSMContext):
    await state.update_data(result_reliability=message.text)
    await EvalFlow.ResultType.set()
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                         reply_markup=result_type_kb)


@dp.message_handler(lambda m: m.text in ["–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω"], state=EvalFlow.ResultType)
async def s_result_type(message: types.Message, state: FSMContext):
    await state.update_data(result_type=message.text)
    await EvalFlow.ProjectEffect.set()
    await message.answer("–ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞?", reply_markup=project_effect_kb)


@dp.message_handler(lambda m: m.text in ["–†–∞–∑–æ–≤—ã–π", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"], state=EvalFlow.ProjectEffect)
async def s_effect(message: types.Message, state: FSMContext):
    await state.update_data(project_effect=message.text)
    await EvalFlow.ReadyToSend.set()
    await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)


# ====== SEND / AFTER ======
@dp.message_handler(lambda m: m.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É", state=EvalFlow.ReadyToSend)
async def s_send(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        await send_report_to_admin(data)
        await message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=after_send_kb)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É: {e}")


@dp.message_handler(lambda m: m.text == "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ü–µ–Ω–∫–µ –¥—Ä—É–≥–æ–π –∫–æ–º–∞–Ω–¥—ã", state="*")
async def s_again(message: types.Message, state: FSMContext):
    await state.finish()
    await EvalFlow.TeamName.set()
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ü–µ–Ω–∏—Ç—å.",
                         reply_markup=ReplyKeyboardRemove())


@dp.message_handler(lambda m: m.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å", state="*")
async def s_finish(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–°–ø–∞—Å–∏–±–æ, —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üôå", reply_markup=ReplyKeyboardRemove())


# ====== DIAGNOSTICS ======
@dp.message_handler(commands=["ping"], state="*")
async def ping(message: types.Message):
    try:
        await bot.send_message(ADMIN_ID, "–¢–µ—Å—Ç: –±–æ—Ç –º–æ–∂–µ—Ç –ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É ‚úÖ")
        await message.answer("–ü—Ä–æ–±–Ω—ã–π —Å–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É ‚úÖ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É: {e}")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
