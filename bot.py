import os
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∫–æ–º–∞–Ω–¥—ã
categories = {
    "–ü—Ä–æ–¥–∞–∂–∏": [
        "–∫—Ä–∞–±—Å—Ç–µ—Ä—ã",
        "–∫—Ä–∏–ø—Ç–æ–Ω",
        "—É–ª—ë—Ç–Ω—ã–π —Å—á—ë—Ç",
        "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –º–∞–≥–Ω–∞—Ç—ã",
        "wealth & health",
        "vip —Å–ø–µ—Ü–Ω–∞–∑",
        "–ø—Ä–∏–≤–ª–µ–∫–∞—Ç–æ—Ä",
        "—Å—Ç–∏—Ä–∞—è –≥—Ä–∞–Ω–∏—Ü—ã",
        "—Ñ–∞–∫—Ç–æ—Ä —Ä–æ—Å—Ç–∞",
        "–∑–∞–π, –≤—ã–¥–∞–≤–∞–π!",
        "bestsalers",
        "–∏–ø–æ—Ç–µ—á–Ω—ã–π —à–∞–Ω—Ç–∞—Ä–∞–º",
        "–∫–∞–∫–∏–µ –ª—é–¥–∏!",
        "–≤—Å—ë –≤–∫–ª—é—á–µ–Ω–æ",
        "–∫–æ—Å–º–æ –ø—Ä–æ–¥–∞–∫—à–Ω",
        "–≤—Å—ë –∑–∞—â–∏—Ç–∞–Ω–æ",
        "–º–∏–ª–ª–∏–∞—Ä–¥—ã –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü",
        "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –±–∏–∑–¥–µ–≤",
        "–Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å",
        "–±–µ–∑ –ø–æ—Ç–µ—Ä—å",
    ],
    "–ü—Ä–æ—Ü–µ—Å—Å—ã": [
        "–º–∏–ª—ã–π, –∫–æ–¥ –¥–æ–≤–∏–Ω—á–µ–Ω",
        "r.a.i. center",
        "–≤–µ–ª–∏–∫–∏–π –∫–æ–º–±–∏–Ω–∞—Ç–æ—Ä",
        "–±–µ—Å—Å—Ç—Ä–∞—à–Ω—ã–µ pro —Å–∫—É–¥—ã",
        "—Å–∫—Ä–∞—Ç",
        "—Ä–∞–∫–µ—Ç–∞",
        "data stars",
        "–∫—É–±–∏–∫ —Ä—É–±–∏–∫–∞",
        "—ç–≤–æ–ª—é—Ü–∏—è",
        "–Ω–∞ —Å–≤—è–∑–∏",
        "–∫–æ–º–∞–Ω–¥–∞ —ç. –Ω–∞–±–∏—É–ª–ª–∏–Ω–æ–π",
        "the filter",
        "–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç",
        "–∑–Ω–∞—Ö–∞—Ä—å kids",
        "—Å–æ–≤–∫–æ–º–ø–∞—Å—Å–∏–≤–∏—Ç–∏",
        "–Ω–µ–π—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ",
        "–∫—Ä–µ–º–Ω–∏–µ–≤–∞—è –≥–∞–ª–∏–Ω–∞",
        "–∏–Ω—Ç—Ä–æ–≤–µ—Ä—Ç—ã",
        "im–æ–ª–æ–¥—Ü–∞!",
        "–ª—é–¥–∏ –≤–∞–∂–Ω–µ–µ",
    ]
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–ü—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ—Ü–µ—Å—Å—ã")
yes_no_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–î–∞", "–ù–µ—Ç")
info_quality_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
method_validity_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–ï—Å—Ç—å –æ—à–∏–±–∫–∏", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"
)
assumptions_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"
)
result_reliability_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–í–µ—Ä–∏–º", "–ù–µ –≤–µ—Ä–∏–º", "–°–æ–º–Ω–µ–≤–∞–µ–º—Å—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"
)
result_type_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω"
)
project_effect_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(
    "–†–∞–∑–æ–≤—ã–π", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"
)
send_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
restart_kb = ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É")


# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_kb)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message_handler(lambda msg: msg.text in ["–ü—Ä–æ–¥–∞–∂–∏", "–ü—Ä–æ—Ü–µ—Å—Å—ã"])
async def choose_category(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"category": message.text}

    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for team in categories[message.text]:
        kb.add(team)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=kb)


# –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã
@dp.message_handler(lambda msg: True)
async def choose_team(message: types.Message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})
    category = data.get("category")

    if not category:
        return

    team_name = message.text.strip().lower()
    if team_name not in categories[category]:
        return

    user_data[user_id]["team_name"] = team_name
    await message.answer("–ö–∞–ø–∏—Ç–∞–Ω –≥–æ–≤–æ—Ä–∏—Ç –æ —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ?", reply_markup=yes_no_kb)


# –í–æ–ø—Ä–æ—Å—ã
@dp.message_handler(lambda msg: msg.text in ["–î–∞", "–ù–µ—Ç"])
async def own_team(message: types.Message):
    user_data[message.from_user.id]["is_own_team"] = message.text
    await message.answer("–ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?", reply_markup=yes_no_kb)


@dp.message_handler(lambda msg: msg.text in ["–•–æ—Ä–æ—à–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–°–ª–∞–±–∞—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"])
async def info_quality(message: types.Message):
    user_data[message.from_user.id]["info_quality"] = message.text
    await message.answer("–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥–∏–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π?", reply_markup=method_validity_kb)


@dp.message_handler(lambda msg: msg.text in ["–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "–ï—Å—Ç—å –æ—à–∏–±–∫–∏", "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è"])
async def method_validity(message: types.Message):
    user_data[message.from_user.id]["method_validity"] = message.text
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—Å—ã–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞", reply_markup=assumptions_kb)


@dp.message_handler(lambda msg: msg.text in ["–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã", "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å"])
async def assumptions_quality(message: types.Message):
    user_data[message.from_user.id]["assumptions_quality"] = message.text
    await message.answer("–í–µ—Ä–∏—Ç–µ –ª–∏ –≤ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á—ë—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞?", reply_markup=result_reliability_kb)


@dp.message_handler(lambda msg: msg.text in ["–í–µ—Ä–∏–º", "–ù–µ –≤–µ—Ä–∏–º", "–°–æ–º–Ω–µ–≤–∞–µ–º—Å—è", "–ù–µ –º–æ–∂–µ–º –æ—Ü–µ–Ω–∏—Ç—å"])
async def result_reliability(message: types.Message):
    user_data[message.from_user.id]["result_reliability"] = message.text
    await message.answer("–û—Ü–µ–Ω–∏—Ç–µ —Ç–∏–ø –æ—Ü–µ–Ω–∫–∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", reply_markup=result_type_kb)


@dp.message_handler(lambda msg: msg.text in ["–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω", "–°–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω"])
async def result_type(message: types.Message):
    user_data[message.from_user.id]["result_type"] = message.text
    await message.answer("–ö–∞–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞?", reply_markup=project_effect_kb)


@dp.message_handler(lambda msg: msg.text in ["–†–∞–∑–æ–≤—ã–π", "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π"])
async def project_effect(message: types.Message):
    user_data[message.from_user.id]["project_effect"] = message.text
    await message.answer("–°–ø–∞—Å–∏–±–æ üôè", reply_markup=send_kb)


# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
@dp.message_handler(lambda msg: msg.text == "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É")
async def send_to_admin(message: types.Message):
    data = user_data.pop(message.from_user.id, {})  # –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    report = (
        f"–ö–æ–º–∞–Ω–¥–∞: {data.get('team_name')}\n"
        f"–û —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥–µ: {data.get('is_own_team')}\n"
        f"–ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å: {data.get('info_quality')}\n"
        f"–ú–µ—Ç–æ–¥–∏–∫–∞: {data.get('method_validity')}\n"
        f"–ü—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏: {data.get('assumptions_quality')}\n"
        f"–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç—å: {data.get('result_reliability')}\n"
        f"–¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {data.get('result_type')}\n"
        f"–≠—Ñ—Ñ–µ–∫—Ç: {data.get('project_effect')}"
    )
    await bot.send_message(ADMIN_ID, report)
    await message.answer("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚úÖ", reply_markup=restart_kb)


@dp.message_handler(lambda msg: msg.text == "–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É")
async def restart(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=main_kb)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
